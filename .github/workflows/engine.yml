name: "Engine CI/CD"

on:
  push:
    branches: ['main', 'staging', 'dev']
  pull_request:
    branches: ['main', 'staging', 'dev']
  schedule:
    - cron: '32 23 * * 6'

jobs:
  changes:
    name: Allocating Push Filter
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      pull-requests: read
    outputs:
      engine: ${{ steps.filter.outputs.engine }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            engine:
              - 'engine/**'
          base: ${{ github.ref }}

  analyze:
    name: Security Analysis on (${{ matrix.language }})
    needs: changes
    if: github.event_name != 'push' || needs.changes.outputs.engine == 'true'
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'Manual build mode not configured'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  run-lint:
    name: Linting Code
    runs-on: ubuntu-latest
    needs: [changes, analyze]
    if: github.event_name != 'push' || needs.changes.outputs.engine == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_YAML: false
          VALIDATE_GITHUB_ACTIONS: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_FLAKE8: false

  build-and-deploy:
    name: Build and Deploy Engine
    runs-on: ubuntu-latest
    needs: [changes]
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
    permissions:
      contents: read
      id-token: write
    outputs:
      image_tag: ${{ steps.set-env.outputs.ENV_NAME }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set environment name
        id: set-env
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


  grype-scan:
    name: Grype Security Scan
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/engine:${{ needs.build-and-deploy.outputs.image_tag }}

      - name: Scan Docker image with Grype
        run: |
          grype ${{ secrets.DOCKER_USERNAME }}/engine:${{ needs.build-and-deploy.outputs.image_tag }}
